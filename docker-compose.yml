version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"  # Streamlit
      - "8888:8888"  # Jupyter
      - "5678:5678"  # debugpy
      - "6080:6080"  # noVNC
      - "5900:5900"  # VNC
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./data:/app/data
      - ./docs:/app/docs
      - ./config:/app/config
      - ./notebooks:/app/notebooks
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app/src/python
      - MOJO_PATH=/app/src/mojo
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONBREAKPOINT=ipdb.set_trace
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - MPLBACKEND=Agg
      - JUPYTER_ENABLE_LAB=yes
      - PYTEST_ADDOPTS="--color=yes"
      - DISPLAY_NUM=1
      - HEIGHT=768
      - WIDTH=1024
    networks:
      - app_network
      - monitoring_network
    shm_size: 2gb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  computer-use-demo:
    build:
      context: ./references/anthropic-quickstarts/computer-use-demo
      dockerfile: Dockerfile
    ports:
      - "6080:6080"  # noVNC
      - "5900:5900"  # VNC
    volumes:
      - ./references/anthropic-quickstarts/computer-use-demo:/home/computeruse/computer_use_demo
    environment:
      - DISPLAY_NUM=1
      - HEIGHT=768
      - WIDTH=1024
    networks:
      - app_network

  dev:
    extends:
      service: app
    command: ./dev.sh watch
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
      - ./notebooks:/app/notebooks
    environment:
      - PYTEST_ADDOPTS="--color=yes"

  notebook:
    extends:
      service: app
    command: ./dev.sh notebook
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./src:/app/src
      - ./data:/app/data

  viz:
    extends:
      service: app
    command: ./dev.sh streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
      - ./data:/app/data

  test:
    extends:
      service: app
    command: ./dev.sh test
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./data:/app/data
    environment:
      - PYTEST_ADDOPTS="--color=yes -v --cov=src/python --cov-report=term-missing"

  prometheus:
    image: prom/prometheus:v2.46.0
    ports:
      - "9090:9090"
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:10.5.1
    ports:
      - "3000:3000"
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_USER_ROLE: Admin
      GF_AUTH_ANONYMOUS_ENABLED: true

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - "9093:9093"
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager

  node-exporter:
    image: prom/node-exporter:v1.7.0
    ports:
      - "9100:9100"
    networks:
      - monitoring_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.0
    ports:
      - "8080:8080"
    networks:
      - monitoring_network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/loki:/etc/loki

  promtail:
    image: grafana/promtail:2.9.2
    networks:
      - monitoring_network
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail:/etc/promtail

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
