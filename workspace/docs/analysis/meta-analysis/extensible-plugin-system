from typing import Protocol

class CognitivePlugin(Protocol):
    """
    Protocol for defining cognitive framework plugins
    """
    def process_interaction(
        self, 
        interaction_type: str, 
        interaction_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Process an interaction and potentially modify the response
        """
        ...

class PluginEnabledCognitiveFramework(CognitiveFramework):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.plugins: List[CognitivePlugin] = []
    
    def register_plugin(self, plugin: CognitivePlugin):
        """
        Register a new cognitive processing plugin
        """
        self.plugins.append(plugin)
    
    def dynamic_interaction_model(
        self, 
        interaction_type: str, 
        interaction_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Enhanced interaction model with plugin support
        """
        # Base response generation
        response = super().dynamic_interaction_model(interaction_type, interaction_data)
        
        # Apply plugins sequentially
        for plugin in self.plugins:
            try:
                response = plugin.process_interaction(interaction_type, response)
            except Exception as e:
                self.logger.warning(f"Plugin processing error: {e}")
        
        return response

# Example Plugin
class WorkflowOptimizationPlugin:
    def process_interaction(
        self, 
        interaction_type: str, 
        interaction_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        if interaction_type == 'user_input':
            # Add workflow optimization suggestions
            interaction_data.setdefault('suggestions', []).append(
                'Consider using automation tools for repetitive tasks'
            )
        return interaction_data